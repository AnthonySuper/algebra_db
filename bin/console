#!/usr/bin/env ruby

require 'bundler/setup'
require 'algebra_db'
require 'logger'

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

# (If you use this, don't forget to add pry to your Gemfile!)
require 'pry'

##
# Basic user table
class User < AlgebraDB::Table
  self.table_name = :users

  column :id, :Integer
  column :first_name, :Text
  column :last_name, :Text

  relationship :users_not_me, User do |other_users|
    other_users.id.neq(id)
  end

  relationship :audits, -> { UserAudit } do |user_audits|
    user_audits.user_id.eq(id)
  end

  ##
  # Can return expressions!
  def full_name
    first_name.append(AlgebraDB::Build.param(' ')).append(last_name)
  end
end

##
# Fake audit log for users
class UserAudit < AlgebraDB::Table
  self.table_name = :user_audits

  column :id, :Integer
  column :user_id, :Integer
  column :scopes_granted, AlgebraDB::Value::Array::Text
  column :changes, AlgebraDB::Value::JSONB

  relationship :user, User do |user|
    user.id.eq(user_id)
  end

  relationship :similar_scopes, UserAudit do |other_audits|
    other_audits.scopes_granted.overlaps(scopes_granted).and(
      other_audits.id.neq(id)
    )
  end
end

INSERT_QUERY = AlgebraDB::Statement::Insert.run_syntax do
  into(User, %i[first_name last_name])
  value(param('Joe'), param('Biden'))
  value(param('Kamala'), param('Harris'))
  returning(%i[id first_name last_name])
end

INSERT_HASHES = AlgebraDB::Statement::Insert.insert_hash(
  User,
  [
    { first_name: 'Bob', last_name: 'Smith' },
    { first_name: 'Bob', last_name: 'Warwick' }
  ]
)

COOL_QUERY = AlgebraDB::Statement::Select.run_syntax do
  audits = all(UserAudit)
  similar = join_relationship(audits.similar_scopes)
  audit_users = join_relationship(audits.user)
  similar_users = join_relationship(similar.user)
  select(
    parent_id: audits.id,
    parent_scopes: audits.scopes_granted,
    parent_user: audit_users.full_name,
    child_id: similar.id,
    child_scopes: similar.scopes_granted,
    child_user: similar_users.full_name
  )
end

##
# Connection wrapper that logs stuff
class LoggedConnection
  def initialize(logger, connection)
    @logger = logger
    @connection = connection
  end

  attr_reader :logger, :connection

  def exec_params(query, params, &block)
    logger.debug(query)
    connection.exec_params(query, params, &block)
  end
end

CONN = LoggedConnection.new(Logger.new($stdout), PG::Connection.new('postgres://localhost/algebra_db_test'))

Pry.start
